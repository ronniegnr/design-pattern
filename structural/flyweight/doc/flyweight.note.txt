- Use sharing to support large numbers of fine-grained objects efficiently
- primary objective is to reduce number of object creation, decrease memory usage and increase performance
-

https://sourcemaking.com/design_patterns/flyweight
http://www.tutorialspoint.com/design_pattern/flyweight_pattern.htm


- difference between object pool and flyweight pattern

One difference in that flyweights are commonly immutable instances, while resources acquired from the pool usually are mutable.

So you create flyweights to avoid the cost of repeatedly create multiple instances of objects containing the same state (because they are all the same, you just create only one and reuse it throughout all places in your app), while resources in a pool are particular resources that you want to control individually and possibly have different state, but you don't want to pay the cost of creation and destruction because they are all initialized in the same state.

http://stackoverflow.com/questions/9322141/flyweight-vs-object-pool-patterns-when-is-each-useful